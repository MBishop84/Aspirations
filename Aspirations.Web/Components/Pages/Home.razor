@page "/"
@inject ApiClient ApiClient
@inject DialogService Dialog

<PageTitle>Home</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="10px">
    <RadzenImage Path="images/stoic-strategist.png" Style="width: 25%" AlternateText="stoic" />
    <br/>
    @if(_loading)
    {
        <RadzenText TextStyle="TextStyle.Subtitle1">Seeking Wisdom...</RadzenText>
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Style="width: 50%; height: 3px"
                           Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenText TextStyle="TextStyle.Subtitle1" Style="max-width: 50%">@_quote.Text</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle2">@_quote.Author.Name</RadzenText>
    }
    <RadzenButton Variant="Variant.Outlined" Shade="Shade.Darker" Click="@NewQuote" Text="Refresh Quote" ButtonStyle="ButtonStyle.Secondary" />
</RadzenStack>

@code{
    record Author(string Name);
    record Quote(string Text, Author Author);
    Quote _quote = new("Seeking Wisdom...", new Author("Unknown"));
    bool _loading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await GetQuote();
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task NewQuote()
    {
        _loading = true;
        await GetQuote();
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetQuote()
    {
        try
        {
            _quote = await ApiClient.GetAsync<Quote>("/api/quotes/random");
        }
        catch (Exception ex)
        {
            await Dialog.Alert(ex.StackTrace, ex.Message);
        }
    }
}